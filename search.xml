<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA基础-运算符</title>
      <link href="/2020/07/03/JAVA%E5%9F%BA%E7%A1%80-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/07/03/JAVA%E5%9F%BA%E7%A1%80-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>&nbsp;  </p><h2 id="2-1-ensp-算数运算符"><a href="#2-1-ensp-算数运算符" class="headerlink" title="2.1 &ensp; 算数运算符"></a>2.1 &ensp; 算数运算符</h2><table><thead><tr><th>算数运算符包括：</th><th></th></tr></thead><tbody><tr><td>+</td><td>加法运算，字符串连接运算</td></tr><tr><td>-</td><td>减法运算</td></tr><tr><td>*</td><td>乘法运算</td></tr><tr><td>/</td><td>除法运算</td></tr><tr><td>%</td><td>取模运算，两个数字相除取余数</td></tr><tr><td>++,–</td><td>自增,自减运算</td></tr></tbody></table><p>java中，整数使用以上运算符，无论怎么计算，也不会得到小数。  </p><pre><code>public static void main(String[]args) {    int i = 1234;    System.out.println(i / 1000 * 1000); //计算的结果是1000}</code></pre><p><font color = 'skyblue'>++</font>  运算，变量自己增长1。反之，<font color = 'skyblue'>–</font>运算，变量自己减1，用法与<font color = 'skyblue'>++</font> 一致。  </p><ul><li><p>独立运算:  </p><ul><li>变量在独立运算时，<font color = 'skyblue'>前++</font> 和 <font color = 'skyblue'>后++</font>没有区别  </li><li>变量前 ++： 例如 ++i。  </li><li>变量后 ++： 例如 i++。  </li></ul></li><li><p>混合计算：  </p><ul><li><p>和其他变量放在一起，前++ 和 后++ 就产生了不同。  </p></li><li><p>变量 前++ ：变量a自身加1，将加1后的结果赋值给b，也就是a先计算。a 和 b的结果都2。  </p><pre><code>public static void main(String[]args){  int a = 1;  int b = ++a;  System.out.println(a);//计算结果是2  System.out.println(b);//计算结果是2}    </code></pre></li><li><p>变量 后++ ：变量a先把自己的值1，赋值给变量b，此时变量b的值就是1，变量a自己再加1。a的结果是2，b<br>的结果是1。  </p><pre><code>public static void main(String[] args) {int a = 1;int b = a++;System.out.println(a);//计算结果是2System.out.println(b);//计算结果是1}  </code></pre></li></ul></li><li><p>+符号在字符串中的操作：   </p><ul><li><p>+符号在遇到字符串的时候，表示连接、拼接的含义        </p></li><li><p>“a”+”b”的结果是“ab”，连接含义  </p><pre><code>public static void main(String[] args){System.out.println(&quot;5+5=&quot;+5+5);//输出5+5=55}      </code></pre></li></ul></li></ul><p>&nbsp;</p><h2 id="2-2-ensp-赋值运算符"><a href="#2-2-ensp-赋值运算符" class="headerlink" title="2.2 &ensp;赋值运算符"></a>2.2 &ensp;赋值运算符</h2><table><thead><tr><th>赋值运算符包括:</th><th></th></tr></thead><tbody><tr><td>=</td><td>等于号</td></tr><tr><td>+=</td><td>加等于</td></tr><tr><td>-=</td><td>减等于</td></tr><tr><td>*=</td><td>乘等于</td></tr><tr><td>/=</td><td>除等于</td></tr><tr><td>%=</td><td>取模等</td></tr></tbody></table><p>tips:&ensp; 赋值运算符，就是将符号右边的值，赋给左边的变量。  </p><pre><code>public static void main(String[] args){    int i = 5;    i+=5;//计算方式 i=i+5 变量i先加5，再赋值变量i    System.out.println(i); //输出结果是10}  </code></pre><p>&nbsp;</p><h2 id="2-3-ensp-比较运算符"><a href="#2-3-ensp-比较运算符" class="headerlink" title="2.3 &ensp;比较运算符"></a>2.3 &ensp;比较运算符</h2><table><thead><tr><th>比较运算符包括</th><th></th></tr></thead><tbody><tr><td>==</td><td>比较符号两边数据是否相等，相等结果是true。</td></tr><tr><td>&lt;</td><td>比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td></tr><tr><td>&gt;</td><td>比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td></tr><tr><td>&lt;=</td><td>比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td>&gt;=</td><td>比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td>!=</td><td>不等于符号 ，如果符号两边的数据不相等，结果是true。</td></tr></tbody></table><p>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值 true 或者 false 。  </p><pre><code>public static void main(String[] args) {System.out.println(1==1);//trueSystem.out.println(1&lt;2);//trueSystem.out.println(3&gt;4);//falseSystem.out.println(3&lt;=4);//trueSystem.out.println(3&gt;=4);//falseSystem.out.println(3!=4);//true}</code></pre><p>&nbsp;</p><h2 id="2-4-ensp-逻辑运算符"><a href="#2-4-ensp-逻辑运算符" class="headerlink" title="2.4 &ensp;逻辑运算符"></a>2.4 &ensp;逻辑运算符</h2><ul><li><p>&amp;&amp; 短路与  </p><ul><li>两边都是true，结果是true  </li><li>一边是false，结果是false</li><li>短路特点：符号左边是false，右边不再运算  </li></ul></li><li><p>| | 短路或 </p><ul><li>两边都是flase，结果是flase </li><li>一边是true，结果是true</li><li>短路特点：符号左边是true，右边不再运算  </li></ul></li><li><p>! 取反</p><ul><li>! true 结果是false</li><li>! false结果是true  </li></ul><p>tips:逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值 true 或者 false  </p><pre><code>public static void main(String[] args) {    System.out.println(true &amp;&amp; true); //true    System.out.println(true &amp;&amp; false); //false    System.out.println(false &amp;&amp; true); //false，右边不计算    System.out.println(false || false); //falase    System.out.println(false || true); //true    System.out.println(true || false); //true，右边不计算    System.out.println(!false); //true}  </code></pre></li></ul><p>&nbsp;</p><h2 id="2-4-ensp-三元运算符"><a href="#2-4-ensp-三元运算符" class="headerlink" title="2.4 &ensp;三元运算符"></a>2.4 &ensp;三元运算符</h2><ul><li><p>三元运算符格式：  <font color = 'skyblue'>数据类型 变量名 = 布尔类型表达式？结果1：结果2 </font>  </p></li><li><p>三元运算符计算方式：  </p><ul><li><p>布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。</p></li><li><p>布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。  </p><pre><code>public static void main(String[] args) {int i = (1==2 ? 100 : 200);System.out.println(i); //200int j = (3&lt;=4 ? 500 : 600);System.out.println(j); //500}</code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型转换</title>
      <link href="/2020/07/02/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/07/02/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p><font color=skybule>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</font><br>&nbsp;</p><h2 id="1-1-ensp-自动转换"><a href="#1-1-ensp-自动转换" class="headerlink" title="1.1&ensp;自动转换"></a>1.1&ensp;自动转换</h2><p>一个 <font color=skybule>int</font> 类型变量和一个 <font color=skybule>byte</font> 类型变量进行加法运算， 结果会是什么数据类型？   </p><pre><code>int  i = 1;  byte  b = 2;  </code></pre><p>运算结果，变量的类型将是<font color=skybule>int</font> 类型，这就是出现了数据类型的自动类型转换现象。  </p><p>自动转换：将 <font color=skybule>取值范围小的类型</font> 自动提升为 <font color=skybule>取值范围大的类型</font>取值范围大的类。  </p><pre><code>public static void main(String[] args) {     int i = 1;     byte b = 2;     // byte x = b + i; // 报错     //int类型和byte类型运算，结果是int类型     int j = b + i;     System.out.println(j);}</code></pre><p>&nbsp;<br>转换原理的图解：<br><font color=skybule>byte</font> 类型内存占有1个字节，在和 <font color=skybule>int</font> 类型运算会提升为 <font color=skybule>int</font> 类型 ，自动补充3个字节，因此计后的结果还是 <font color=skybule>int</font>类<br>型     </p><p>如图所示：<br><img src="https://note.youdao.com/yws/api/personal/file/1469FCB17CF84F099D42064C4AE8D702?method=download&shareKey=11933d04d2a67f68a0f5b69b3e056920" alt=""></p><p>同样道理，当一个 <font color=skybule>int</font>  类型变量和一个<font color=skybule> double</font> 变量运算时， <font color=skybule>int</font> 类型将会自动提升为 <font color=skybule> double</font> 类型进行运算。</p><pre><code>public static void main(String[] args) {    int i = 1;    double d = 2.5;    //int类型和double类型运算，结果是double类型    //int类型会提升为double类型    double e = d+i;    System.out.println(e);}   </code></pre><p>&nbsp;</p><p>转换规则:<br>范围小的类型向范围大的类型提升， <font color = skybule> byte </font>、<font color = skybule>short</font>、<font color = skybule>char</font> 运算时直接提升为<font color = skybule> int </font>。</p><pre><code>byte、short、char‐‐&gt;int‐‐&gt;long‐‐&gt;float‐‐&gt;double  </code></pre><p>&nbsp;</p><h2 id="1-2-ensp-强制转换"><a href="#1-2-ensp-强制转换" class="headerlink" title="1.2&ensp;强制转换"></a>1.2&ensp;强制转换</h2><p>将 1.5 赋值到 <font color = skybule> int </font> 类型变量会发生什么？产生编译失败，肯定无法赋值。  </p><pre><code>int i = 1.5;  //错误  </code></pre><p><font color = skybule>double</font> 类型内存8个字节，<font color = skybule> int </font>类型内存4个字节。 1.5 是 <font color = skybule>double</font>  类型，取值范围大于 <font color = skybule> int </font> 。可以理解为 <font color = skybule> double </font> 是8<br>升的水壶， <font color = skybule> int </font> 是4升的水壶，不能把大水壶中的水直接放进小水壶去。  </p><p>想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值  </p><p>强制类型转换：将 取值范围大的类型 强制转换成 取值范围小的类型 。  </p><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。      </p><p>转换格式：<br>数据类型&ensp; 变量名 = (数据类型)&ensp; 被转数据值  </p><p>将 1.5 赋值到 <font color = skybule>int</font> 类型，代码修改为：  </p><pre><code>// double类型数据强制转成int类型，直接去掉小数点。int i = (int)1.5;</code></pre><p>同样道理，当一个 <font color = skybule>short</font> 类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给<font color = skybule>short</font>类型变量，就需要强制转换。</p><pre><code>public static void main(String[] args) {    //short类型变量，内存中2个字节    short s = 1;    /*    出现编译失败    s和1做运算的时候，1是int类型，s会被提升为int    类型    s+1后的结果是int类型，将结果在赋值会short类    型时    发生错误    short内存2个字节，int类型4个字节    必须将int强制转成short才能完成赋值    */    s = s + 1；//编译失败    s = (short)(s+1);//编译成功}  </code></pre><p> 转换原理图解：<br> <img src="https://note.youdao.com/yws/api/personal/file/475938AE2C5146F18BE84237E6791E62?method=download&shareKey=c2c1f101b29f2b7a06acf645a0dc1cad" alt="">  </p><p> <font color=red size = 5>tip:</font>  </p><p>  浮点转成整数，直接取消小数点，可能造成数据损失精度。<br>  <font color = skybule>int</font> 强制转成 <font color = skybule>short</font> 砍掉2个字节，可能造成数据丢失。</p><pre><code>// 定义s为short范围内最大值short s = 32767;// 运算后，强制转换，砍掉2个字节后会出现不确定的    结果s = (short)(s + 10);  </code></pre><p>&nbsp;  </p><h2 id="1-3-ensp-ASCII编码表"><a href="#1-3-ensp-ASCII编码表" class="headerlink" title="1.3 &ensp;ASCII编码表"></a>1.3 &ensp;ASCII编码表</h2><pre><code>public static void main(String[] args) {//字符类型变量char c = &apos;a&apos;;int i = 1;//字符类型和int类型计算System.out.println(c+i);//输出结果是98}  </code></pre><p>在计算机的内部都是二进制的0、1数据，如何让算机可以直接识别人类文字的问题呢？就产生出编码表的概念。  </p><p>编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。</p><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>0</td><td>48</td></tr><tr><td>9</td><td>57</td></tr><tr><td>A</td><td>65</td></tr><tr><td>Z</td><td>90</td></tr><tr><td>a</td><td>97</td></tr><tr><td>z</td><td>122</td></tr></tbody></table><p><font color = gray>将所有的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（<br>American Standard Code for Information Interchange 美国标准信息交换码）</font>  </p><p>tips:<br><font color = gray>在<font color = skybule>char</font> 类型和<font color = skybule>int</font>类型计算的过程中，<font color = skybule>char</font>类型的字符先查询编码表，得到97，再和1求和，结果为98。<font color = skybule>char</font>类型提升<br>为了<font color = skybule>int</font>类型。<font color = skybule>char</font>类型内存2个字节，<font color = skybule>int</font>类型内存4个字节。</font>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-变量，常量及数据类型</title>
      <link href="/2020/07/02/java%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%8F%8A%E5%B8%B8%E9%87%8F/"/>
      <url>/2020/07/02/java%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%8F%8A%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基础-变量"><a href="#JAVA基础-变量" class="headerlink" title="JAVA基础-变量"></a>JAVA基础-变量</h1><h2 id="1-1常量的概述"><a href="#1-1常量的概述" class="headerlink" title="1.1常量的概述"></a>1.1常量的概述</h2><p>&emsp;&emsp; 常量：是指在Java程序中固定不变的数据.  </p><p>&nbsp; </p><h2 id="1-2常量的分类"><a href="#1-2常量的分类" class="headerlink" title="1.2常量的分类"></a>1.2常量的分类</h2><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0，1，  567，  -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0，  -0.1，  255</td></tr><tr><td>字符常量</td><td>单引号&emsp;’&emsp;’&emsp;引起来，只能写一个字符，必须有内容</td><td>‘a’ ， ‘ ‘，  ‘好’</td></tr><tr><td>字符串常量</td><td>双引号&emsp;”&emsp;”&emsp;引起来，可以写多个内容，也可以不写</td><td>“A” ，”Hello” ，”你好” ,”&emsp;”</td></tr><tr><td>布尔常量</td><td>只有两个值</td><td>true,flase</td></tr><tr><td>空常量</td><td>只有一个值</td><td>null</td></tr></tbody></table><p>&nbsp;  </p><h2 id="1-3常量的练习"><a href="#1-3常量的练习" class="headerlink" title="1.3常量的练习"></a>1.3常量的练习</h2><pre><code>public class ConstantDemo { public static void main(String[] args){             //输出整数常量             System.out.println(123);            //输出小数常量              System.out.println(0.125);              //输出字符常量             System.out.println(&apos;A&apos;);                   //输出布尔常量                System.out.println(true);                   //输出字符串常量                 System.out.println(&quot;你好Java&quot;);         }    </code></pre><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;    </p><h1 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h1><h2 id="2-1变量的概述"><a href="#2-1变量的概述" class="headerlink" title="2.1变量的概述"></a>2.1变量的概述</h2><p>&emsp;&emsp; 变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。<br>&emsp;&emsp; tips： Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。 </p><h2 id="2-2变量的数据类型"><a href="#2-2变量的数据类型" class="headerlink" title="2.2变量的数据类型"></a>2.2变量的数据类型</h2><p>&emsp;四类八种基本数据类型：   </p><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整形</td><td>int(默认)</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0~65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><p>&nbsp;</p><p>&emsp; Java中的默认类型：整数类型是 int 、浮点类型是 double 。<br>&emsp;变量定义的格式包括三个要素： 数据类型 、 变量名 、 数据值 。  </p><p> 格式 &emsp; 数据类型  变量名&emsp; =&emsp; 数据值  </p><p>&nbsp;</p><h2 id="2-3变量的练习"><a href="#2-3变量的练习" class="headerlink" title="2.3变量的练习"></a>2.3变量的练习</h2><p>定义所有基本数据类型的变量，代码如下</p><pre><code>public class Variable { public static void main(String[] args){              //定义字节型变量         byte b = 100;     System.out.println(b);         //定义短整型变量         short s = 1000;         System.out.println(s);         //定义整型变量        int i = 123456;         System.out.println(i);         //定义长整型变量        long l = 12345678900L;         System.out.println(l);         //定义单精度浮点型变量         float f = 5.5F;         System.out.println(f);         //定义双精度浮点型变量         double d = 8.5;         System.out.println(d);        //定义布尔型变量        boolean bool = false;         System.out.println(bool);         //定义字符型变量         char c = &apos;A&apos;;         System.out.println(c);  }  </code></pre><p>&nbsp;<br>&emsp; tips:&emsp;long类型：建议数据后加L表示。<br>&emsp;&emsp;&emsp;&emsp;&emsp;ﬂoat类型：建议数据后加F表示。   </p><p>&nbsp;</p><h2 id="2-4变量的注意事项"><a href="#2-4变量的注意事项" class="headerlink" title="2.4变量的注意事项"></a>2.4变量的注意事项</h2><ul><li>变量名称：在同一个大括号范围内，变量的名字不可以相同。 </li><li>变量赋值：定义的变量，不赋值不能使用。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础总结</title>
      <link href="/2020/06/26/html%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/26/html%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>  #html的知识点概览<br>  <font size="6">1.了解常用浏览器</font><br /><br>  <font size="6">2.掌握WEB标准</font><br /><br>  <font size="6">3.理解标签语义化</font><br /><br>  <font size="6">4.掌握常用的排版标签</font><br /><br>  <font size="6">5.掌握常用的文本格式化图像链接等标签</font><br /><br>  <font size="6">6.掌握三种列表标签</font><br /><br>  <font size="6">7.掌握表格标签</font><br /><br>  <font size="6">8.掌握表格标签</font><br /><br>  <font size="6">9.掌握表单标签</font><br /><br>  <font size="6">10.掌握H5新增表单和表单属性</font><br />  </p><h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><p>  网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</p><p>  <img src="https://note.youdao.com/yws/api/personal/file/FF2706BF8ED4486983A76318C71750A5?method=download&shareKey=12f40f516e9177b244dfabbbcb3b721d" alt="">  </p><h1 id="常见浏览器介绍"><a href="#常见浏览器介绍" class="headerlink" title="常见浏览器介绍"></a>常见浏览器介绍</h1><p>  浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</p><p>  <img src="https://note.youdao.com/yws/api/personal/file/D244858FDE984A9182DD33C988C56748?method=download&shareKey=cd21b36e41b5003b4978febae08874d7" alt="">  </p><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>  浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。<br>  渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>  JS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。</p><p>  最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</p><p>  （1）Trident(IE内核) </p><p>  国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。</p><p>  代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。</p><p>  Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p><p>  （2）Gecko(firefox) </p><p>  Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p><p>  （3） webkit(Safari)  </p><p>   Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。</p><p>   现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p><p>   代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，</p><p>  （4） Chromium/Bink(chrome) </p><p>   在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 </p><p>  ​     大部分国产浏览器最新版都采用Blink内核。</p><p>  （5） Presto(Opera) </p><p>   Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。  </p><p>  移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>  目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p><h1 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h1><p>  通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。</p><p>  问：  哪个语言再全国基本都可以听得懂？ </p><p>  <img src="https://note.youdao.com/yws/api/personal/file/EC9D029AD0B94BDA86AFBA401305BD5F?method=download&shareKey=19a629da602afd79ab425f9c76f7c233" alt=""></p><h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><p>  <strong>1让Web的发展前</strong><br>  <strong>2内容能被更广泛的</strong><br>  <strong>3更容易被搜寻引擎</strong><br>  <strong>4降低网站流量费用</strong><br>  <strong>5使网站更易于维护</strong><br>  <strong>6提高页面浏览速度</strong>  </p><h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><p>   Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><p>  结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。<br>  样式标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。<br>  行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分</p><p>  理想状态我们的源码： .HTML    .css   .js </p><p>  <img src="https://note.youdao.com/yws/api/personal/file/D19E829707BE4510B6CC79E756DB0DDF?method=download&shareKey=13ae5173fb1f77856007d13e51f4d97e" alt="">  </p><p>   **总结 WEB 3个标准：</p><p>   结构标准：决定你是否有个好天然身体 </p><p>   样式标准：决定你是否打扮的美丽外观</p><p>   行为标准：决定你是否有吸引人的行为  </p><h1 id="HTML-初识"><a href="#HTML-初识" class="headerlink" title="HTML 初识"></a>HTML 初识</h1><p>  一般先学习HTML+CSS,先学HTML,后学习CSS。</p><p>  HTML（Hyper Text Markup Language的缩写）中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><p>  <strong> 我是加粗的字体 </strong></p><p>  注意：体会【文本】【标签】【语言】这几个词语  </p><h2 id="HTML骨架格式"><a href="#HTML骨架格式" class="headerlink" title="HTML骨架格式"></a>HTML骨架格式</h2><p>  日常生活的书信，我们要遵循共同的约定。 </p>  <img src="media/mess.png" alt=""><p>  同理：HTML 有自己的语言语法骨架格式：</p>  <HTML>         <head>               <title></title>      <meta name="generator" content="Hexo 4.2.1"></head>      <body>      </body>  </HTML><p>  1。HTML标签：</p><p>  作用所有HTML中标签的一个根节点。</p><p>  2。head标签：</p><p>  作用：用于存放：</p><p>  title,meta,base,style,script,link</p><p>  注意在head标签中我们必须要设置的标签是title</p><p>  3.title标签：</p><p>  作用：让页面拥有一个属于自己的标题。</p><p>  4.body标签：</p><p>  作用：页面在的主体部分，用于存放所有的HTML标签：p,h,a,b,u,i,s,em,del,ins,strong,img</p><p>  猪八戒记忆法:<br>  <img src="https://note.youdao.com/yws/api/personal/file/02D76A328AD243598AD7396754B01F49?method=download&shareKey=b747ed06d4096a45074d51545d20e600" alt=""></p><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><p>  在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素</p><p>  ###1.双标签</p><p>  &lt;标签名&gt; 内容 &lt;/标签名&gt;</p><p>  该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</p><p>  比如 <body>我是文字  </body></p><p>  ###2.单标签</p><p>  &lt;标签名 /&gt;</p><p>  单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p><p>   比如  <br /></p><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><p>  标签的相互关系就分为两种：</p><p>  ###1.嵌套关系</p>  <head>  <title> </title>  </head>  <img src="media/father.jpg">  ***  ####2.并列关系  <head></head>  <body></body><p>  <img src="https://note.youdao.com/yws/api/personal/file/4DC0DE200D444B9B9CD288F1B73C6818?method=download&shareKey=1e989900c4c549780d4bffbccd380055" alt=""></p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>  <img src="https://note.youdao.com/yws/api/personal/file/234238C479B148268DFDD7593911E1BF?method=download&shareKey=33d6a7b40e9fcbf9f22ffcb1fc56bdea" alt=""></p><h1 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h1><p>  白话：所谓标签语义化，就是指标签的含义。</p><h2 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h2><ol><li><p>方便代码的阅读和维护</p></li><li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </p></li><li><p>使用语义化标签会具有更好地搜索引擎优化 </p></li></ol><p>  核心：合适的地方给一个最为合理的标签。</p><p>  语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p><p>  不管是谁都能看懂这块内容是什么。</p><p>  遵循的原则：先确定语义的HTML ，再选合适的CSS。   </p><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><p>   首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p><p>   HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><p>  排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>   单词缩写：  head   头部. 标题 </p><p>  为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题</p><p>  标题标签语义：  作为标题使用，并且依据重要性递减</p><p>  其基本语法格式如下：</p><p>  <hn> 标题文本 </hn>   n的范围是1~~6</p><p>  注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用。</p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p>  单词缩写：  paragraph  段落</p><p>   在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p>  <p>  文本内容  </p><p>  是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h3><p>  单词缩写：  horizontal  横线</p><p>  在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr />就是创建横跨网页水平线的标签。其基本语法格式如下：</p>  <hr/>是单标签<p>  在网页中显示默认样式的水平线。   </p><h3 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h3><p>  单词缩写：  break   打断 ,换行</p><p>  在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p>  <br />   这时如果还像在word中直接敲回车键换行就不起作用了。<h3 id="div-span标签"><a href="#div-span标签" class="headerlink" title="div span标签"></a>div span标签</h3><p>  div  span    是没有语义的     是我们网页布局主要的2个盒子</p><p>  div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p><p>  span, 跨度，跨距；范围    </p><p>  语法格式：</p>  <div> 这是头部 </div>    <span>今日价格</span><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><p>  在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p>  <img src="https://note.youdao.com/yws/api/personal/file/B7CE4EDE72D94A18A3B902E9010A6732?method=download&shareKey=1d5419f7feae3eccf44561d5dae4ca4e" alt=""></p><p>  b  i  s  u   只有使用 没有 强调的意思<br>  strong   em  del   ins  语义更强烈</p><h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2>  <img src="media/ttt.jpg" width="300"  /><p>  属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><p>  使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><p>  &lt;标签名 属性1=”属性值1” 属性2=”属性值2” …&gt; 内容 &lt;/标签名&gt;</p><p>  在上面的语法中，</p><p>  1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</p><p>  2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p><p>  3.任何标签的属性都有默认值，省略该属性则取默认值。</p><p>  采取  键值对 的格式   key=”value”  的格式  </p><p>  比如:  </p>  <hr width="400" />  属性  是 宽度    值    是 400 <p>  <font size="4" color="#dd0000">提倡：尽量不使用样式属性。</font><br />。  </p><h2 id="图像标签img"><a href="#图像标签img" class="headerlink" title="图像标签img"></a>图像标签img</h2><p>  单词缩写：   image  图像</p><p>  HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img />以及和他相关的属性。其基本语法格式如下：</p><p>  该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p>  <img src="图像URL" /><p>  <img src="https://note.youdao.com/yws/api/personal/file/7F141C4F3DA84CF08B64E46FB4602E64?method=download&shareKey=991fab33ad3f0cc8b009088214027f90" alt=""></p><h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><p>  单词缩写：  anchor 的缩写 。基本解释 锚, 铁锚 的</p><p>  在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p><p>  <a href="跳转目标" target="目标窗口的弹出方式">文本或图像</a></p><p>  href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</p><p>  target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p><p>  注意：</p><p>  1.外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>  2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </a ></p><p>  3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>  4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。  </p><h3 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h3><p>  通过创建锚点链接，用户能够快速定位到目标内容。<br>  创建锚点链接分为两步：</p><p>  1.使用“a href=”#id名&gt;“链接文本”</a>创建链接文本。</p><p>  2.使用相应的id名标注跳转目标的位置。</p><h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><p>  base 可以设置整体链接的打开状态   </p><p>  base 写到  <head>  </head>  之间    </p><p>  <img src="https://note.youdao.com/yws/api/personal/file/9574320FFEF3492D8D53DE04613860BB?method=download&shareKey=129cdc8700a0eeb0d5bfbf6de282ea05" alt=""></p><h2 id="特殊字符标签"><a href="#特殊字符标签" class="headerlink" title="特殊字符标签"></a>特殊字符标签</h2><p>  <img src="https://note.youdao.com/yws/api/personal/file/1181699D2571495CB98B693C3B7B09CE?method=download&shareKey=42bf25d1779bb7dcdc3d8dfe7dc68570" alt="">    </p><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p>  在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>  ​        </p><pre><code>&lt;!-- 注释语句 --&gt;</code></pre><p>  注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><p>  注释重要性：<br>  <img src="https://note.youdao.com/yws/api/personal/file/7D596AD254F046CB96A8D0EF1754B33D?method=download&shareKey=b1bf7f273af2c1e17d275289cc393651" alt="">     </p><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>  实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。<br>  路径可以分为： 相对路径和绝对路径</p><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><ol><li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;</li><li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;</li><li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;  </li><li>绝对路径:“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a>  </li></ol><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>  什么是列表？</p><p>  把…制成表,以表显示</p><p>  容器里面装载着文字或图表的一种形式，叫列表。</p><p>  列表最大的特点就是  整齐 、整洁、 有序</p><h2 id="无序列表-ul"><a href="#无序列表-ul" class="headerlink" title="无序列表 ul"></a>无序列表 ul</h2><p>  无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p>  <ul>    <li>列表项1</li>    <li>列表项2</li>    <li>列表项3</li>    ......  </ul><p>  比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p><p>  <img src="https://note.youdao.com/yws/api/personal/file/68FCFBCF7B3B416DA7D8793C30A6BE0F?method=download&shareKey=af7d8193f1b424b7251b7278f06f3537" alt=""></p><p>  脚下留心：</p><ol><li><ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。</li><li><li>与</li>之间相当于一个容器，可以容纳所有元素。</li><li>无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</li></ol><h2 id="有序列表-ol"><a href="#有序列表-ol" class="headerlink" title="有序列表 ol"></a>有序列表 ol</h2><p>   <img src="https://note.youdao.com/yws/api/personal/file/BEAA3568C73142D0925E6E73B971CF71?method=download&shareKey=3dfda6af954a2f7da9aaa50bbafc0a9f" alt=""></p><p>   有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p>   <ol>     <li>列表项1</li>     <li>列表项2</li>     <li>列表项3</li>     ......   </ol><p>   所有特性基本与ul 一致。  </p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>   定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p>   <dl>     <dt>名词1</dt>     <dd>名词1解释1</dd>     <dd>名词1解释2</dd>     ...     <dt>名词2</dt>     <dd>名词2解释1</dd>     <dd>名词2解释2</dd>     ...   </dl><p>   用的还可以：</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/0C98E8BACB9F4556A52965C57A0A6763?method=download&shareKey=c1ad3e11657a89ddfd5c6122b8a40691" alt=""></p><hr><h1 id="表格-table"><a href="#表格-table" class="headerlink" title="表格 table"></a>表格 table</h1><p>   存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理表格式数据。</p>   <img src="media/table.png" /><p>   ps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  </p><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>   在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p>   <table>     <tr>       <td>单元格内的文字</td>       ...     </tr>     ...   </table><p>   在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释。</p><p>   1.table用于定义一个表格。</p><p>   2.tr 用于定义表格中的一行，必须嵌套在 table /table标签中，在 table /table中包含几对 tr /tr，就有几行表格。</p><p>   3.td /td：用于定义表格中的单元格，必须嵌套在<tr></tr>标签中，一对 <tr> </tr>中包含几对<td></td>，就表示该行中有多少列（或多少个单元格）。</p><p>   注意：</p><ol><li><tr></tr>中只能嵌套<td></td></li></ol><ol start="2"><li><td></td>标签，他就像一个容器，可以容纳所有的元素</li></ol><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p>   <img src="https://note.youdao.com/yws/api/personal/file/CB94F0DCE51D4B45B58151D679118016?method=download&shareKey=3b45711789a01494af78310f5c2a58e9" alt=""></p><h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>   表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。  </p><p>   <img src="https://note.youdao.com/yws/api/personal/file/29791FA332384187BCCA6BE0AA3C2578?method=download&shareKey=813df70dc342b9b5b6f6e3c75fb78286" alt="">  </p><h2 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h2><p>   在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</p>   <thead></thead>：用于定义表格的头部。<p>   必须位于<table></table> 标签中，一般包含网页的logo和导航等头部信息。</p>   <tbody></tbody>：用于定义表格的主体。<p>   位于<table></table>标签中，一般包含网页中除头部和底部之外的其他内容。</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/CDC6CA03A97644568EF0322576F1F7C8?method=download&shareKey=80b5ec82e47af6ebc160fd9f65a88fc6" alt="">    </p><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>   跨行合并：rowspan    跨列合并：colspan</p><p>   合并单元格的思想：</p><p>   ​     将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p><p>   ​     公式：  删除的个数  =  合并的个数  - 1   </p><h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。  </li></ol><h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>   现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/EEB5FEF63DD24C83BC528DBC4F3BC957?method=download&shareKey=459ad14bfb856ad1c42a51bdbf8260f3" alt=""></p><p>   目的是为了收集用户信息。</p><p>   在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>   在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。   </p><p>   表单控件:包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>   提示信息: 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>   表单域:他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="input-控件"><a href="#input-控件" class="headerlink" title="input 控件"></a>input 控件</h2><p>   在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/2481342D81114674ADB747160981A6E6?method=download&shareKey=73ad91e019460826b1037c94e9ab542d" alt=""></p><h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>   label 标签为 input 元素定义标注（标签）。</p><p>   作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>   如何绑定元素呢？</p><p>   for 属性规定 label 与哪个表单元素绑定。</p><p>   <label for="male">Male</label><br>   <input type="radio" name="sex" id="male" value="male"></p><h2 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h2><p>   如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><p>   html<br>   <textarea cols="每行中的字符数" rows="显示的行数"><br>     文本内容<br>   </textarea></p><p>   网页上的评论就是典型的文本域  </p><p>   <img src="https://note.youdao.com/yws/api/personal/file/BD5C829DD2BF46B9BE50A3637239C52E?method=download&shareKey=821b41f0335c3149231ce78152f408c5" alt="">  </p><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>   在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p>   <form action="url地址" method="提交方式" name="表单名称">     各种表单控件   </form>  <h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>   使用select控件定义下拉菜单的基本语法格式如下:</p>   <select>     <option>选项1</option>     <option>选项2</option>     <option>选项3</option>     ...   </select>  <p>   注意：</p><ol><li><p>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</p></li><li><p>在option 中定义selected =” selected “时，当前项即为默认选中项。</p><p>常用属性：</p></li><li><p>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</p></li><li><p>method<br>用于设置表单数据的提交方式，其取值为get或post。</p></li><li><p>name<br>用于指定表单的名称，以区分同一个页面中的多个表单。</p><p>注意：  每个表单都应该有自己表单域。  </p></li></ol><h1 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h1><ul><li><p>embed：标签定义嵌入的内容</p></li><li><p>audio：播放音频</p></li><li><p>video：播放视频</p></li></ul><h2 id="多媒体-embed"><a href="#多媒体-embed" class="headerlink" title="多媒体 embed"></a>多媒体 embed</h2><p>   embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p><p>   因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p><p>   <embed src="http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p><h2 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h2><p>   HTML5通过<audio>标签来解决音频播放的问题。</p><p>   使用相当简单，如下图所示</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/18DC216C93284BE7A6CF5029BB3B9D17?method=download&shareKey=08af86cf023bbcaf950cb349dc09e33c" alt=""> </p><p>   并且可以通过附加属性可以更友好控制音频的播放，如：</p><p>   autoplay 自动播放</p><p>   controls 是否显不默认播放控件</p><p>   loop 循环播放</p><p>   由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/2E790F0BD65B49D8A5ABBC8478F1DB09?method=download&shareKey=f7654c8a7bdd323e31f02fd2ed926228" alt=""> </p><p>   多浏览器支持的方案，如下图</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/781A86B015AD4BCDBCE66F6E0739A81A?method=download&shareKey=50eb194895d442e363bc012cf77f0f81" alt="">   </p><h2 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h2><p>   HTML5通过<video>标签来解决音频播放的问题。</p><p>   同音频播放一样，<video>使用也相当简单，如下图</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/DFC7052193D04F64A86BB1D5BC13990E?method=download&shareKey=2938e2254cbbb5b6a6335099ec9e2555" alt=""> </p><p>   同样，通过附加属性可以更友好的控制视频的播放</p><p>   autoplay 自动播放</p><p>   controls 是否显示默认播放控件</p><p>   loop 循环播放</p><p>   width 设置播放窗口宽度</p><p>   height 设置播放窗口的高度</p><p>   由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p>   <img src="https://note.youdao.com/yws/api/personal/file/1127E92AB32B4CDF9E319FFBE32FED1B?method=download&shareKey=267d49694b1a398895c39de85712da12" alt=""> </p><p>   <strong>多浏览器支持的方案，如下图****</strong></p><p>   <img src="https://note.youdao.com/yws/api/personal/file/0039A21923BD40E3A5928F64EE2255E2?method=download&shareKey=edfb5896420d61d7d7492a9ea1ad8de5" alt=""></p><h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><p>   header：定义文档的页眉<br>   nav：定义导航链接的部分<br>   footer：定义文档或节的页脚<br>   article：标签规定独立的自包含内容<br>   section：定义文档中的节（section、区段）<br>   aside：定义其所处内容之外的内容  </p><h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><table><thead><tr><th><strong>属性****</strong></th><th><strong>用法****</strong></th><th><strong>含义****</strong></th></tr></thead><tbody><tr><td><strong>placeholder****</strong></td><td><input type="text" placeholder="请输入用户名"></td><td>占位符提供可描述输入字段预期值的提示信息</td></tr><tr><td><strong>autofocus****</strong></td><td><input type="text" autofocus></td><td>规定当页面加载时 input 元素应该自动获得焦点</td></tr><tr><td><strong>multiple****</strong></td><td><input type="file" multiple></td><td>多文件上传</td></tr><tr><td><strong>autocomplete****</strong></td><td><input type="text" autocomplete="off"></td><td>规定表单是否应该启用自动完成功能</td></tr><tr><td><strong>required****</strong></td><td><input type="text" required></td><td>必填项</td></tr><tr><td><strong>accesskey****</strong></td><td><input type="text" accesskey="s"></td><td>规定激活（使元素获得焦点）元素的快捷键</td></tr></tbody></table><h2 id="新增的type属性值："><a href="#新增的type属性值：" class="headerlink" title="新增的type属性值："></a>新增的type属性值：</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>使用示例</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>email</strong></td><td><input type="email"></td><td>输入邮箱格式</td></tr><tr><td><strong>tel</strong></td><td><input type="tel"></td><td>输入手机号码格式</td></tr><tr><td><strong>url*</strong></td><td><input type="url"></td><td>输入url格式</td></tr><tr><td><strong>number</strong></td><td><input type="number"></td><td>输入数字格式</td></tr><tr><td><strong>search</strong></td><td><input type="search"></td><td>搜索框（体现语义化）</td></tr><tr><td><strong>range</strong></td><td><input type="range"></td><td>自由拖动滑块</td></tr><tr><td><strong>time</strong></td><td><input type="time"></td><td></td></tr><tr><td><strong>date</strong></td><td><input type="date"></td><td></td></tr><tr><td><strong>datetime</strong></td><td><input type="datetime"></td><td></td></tr><tr><td><strong>month</strong></td><td><input type="month"></td><td></td></tr><tr><td><strong>week</strong></td><td><input type="week"></td><td></td></tr></tbody></table><p>   ​</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
